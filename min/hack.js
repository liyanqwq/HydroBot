(()=>{"use strict";var __webpack_modules__={4320:(module,__unused_webpack_exports,__webpack_require__)=>{module=__webpack_require__.nmd(module);const fs_extra_1=__webpack_require__(4298),path_1=__webpack_require__(5622),tasks=[["koishi-core",2,["append","throw error2;","if (typeof error2 === 'string'){\n                session.user.usage[argv.command.name]--;\n                return session.send(error2);\n            }\n            session.send(error2.message);"]],["koishi-plugin-teach",3,["append","state.dialogue = dialogue;","\nsession._dialogue = dialogue;"],["replace",".toLowerCase().replace(/\\s+/g, '')",""],["replace","        if (index === 0)\n            message = message.replace(/^[()\\[\\]]*/, '');\n        if (index === arr.length - 1)\n            message = message.replace(/[\\.,?!()\\[\\]~]*$/, '');",""]],["gtoken/build/src/index",1,["append","responseType: 'json',","agent: require('https-proxy-agent')(global.proxy)"]],["koishi-plugin-genshin/src/plugins/abyss",1,["replace","Filter.id(top.avatar_id).name","(Filter.id(top.avatar_id)||{}).name"]]];async function hack(){console.log("Running Hack");for(const[filename,version,...changes]of tasks){let file;try{file=eval("require").resolve(filename)}catch(e){const name=filename.split("/")[0];file=eval("require").resolve(name).split(path_1.sep),file.pop(),file=`${file.join(path_1.sep)}${path_1.sep}${filename.split("/")[1]}`}let content=(0,fs_extra_1.existsSync)(file)?(0,fs_extra_1.readFileSync)(file).toString():"";if("string"==typeof version){(0,fs_extra_1.writeFileSync)(file,version);continue}const first=content.split("\n")[0],ver=parseInt(first.split("// Hacked v")[1],10);if(!(ver>=version)){for(const[e,r,n,t]of changes)if("replace"===e)content=content.replace(r,n);else if("replaceBetween"===e){const[e,a]=content.split(r),[,s]=a.split(n);content=e+r+t+n+s}else"append"===e?content=content.replace(r,r+n):"remove"===e&&(content=content.replace(r,""));content=`// Hacked v${version}\n${content}`,(0,fs_extra_1.writeFileSync)(file,content)}}}module.parent||hack(),module.exports=hack},4298:e=>{e.exports=require("fs-extra")},5622:e=>{e.exports=require("path")}},__webpack_module_cache__={};function __webpack_require__(e){var r=__webpack_module_cache__[e];if(void 0!==r)return r.exports;var n=__webpack_module_cache__[e]={id:e,loaded:!1,exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.loaded=!0,n.exports}__webpack_require__.nmd=e=>(e.paths=[],e.children||(e.children=[]),e);var __webpack_exports__=__webpack_require__(4320)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,